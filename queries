show databases dominos;
use dominos;

describe pizzas;
describe pizza_types;

Select count(*) from pizza_types;

create table orders(
order_id int not null,
order_date date not null,
order_time time not null,
primary key(order_id));

Select count(*) from orders;

create table orders_details(
order_details_id int not null,
order_id int not null,
pizza_id text not null,
quantity int not null,
primary key(order_details_id));

Select count(*) from orders_details;

-- To find pizzas name and category consisting ingredient of garlic. 

select name, category from pizza_types where ingredients like '%Garlic%';

-- total no. of order in 11am to 5pm in 01/01/2023.

select count(order_id) from orders where order_date = '2023-01-01' AND order_time between '11:00:00' and '17:00:00';

-- Find different pizza sizes.

select distinct(size) from pizzas;

-- Retrieve the total number of orders placed.

select count(order_id) as Total_Orders from orders;

-- Calculate the total revenue generated from pizza sales.

select round(sum(orders_details.quantity * pizzas.price),2) as total_sales
from orders_details join pizzas 
on orders_details.pizza_id = pizzas.pizza_id ;

-- Identify the highest-priced pizza.

select pizza_types.name , pizzas.price 
from pizza_types join pizzas 
on pizza_types.pizza_type_id = pizzas.pizza_type_id 
order by pizzas.price desc limit 1;


-- Identify the most common pizza size ordered.

select pizzas.size, count(orders_details.order_details_id) as order_count
from orders_details join pizzas 
on pizzas.pizza_id = orders_details.pizza_id 
group by pizzas.size order by order_count desc ;

-- List the top 5 most ordered pizza types along with their quantities.

select pizza_types.name, sum(orders_details.quantity) as order_count
from orders_details join pizzas
on orders_details.pizza_id = pizzas.pizza_id
join pizza_types
on pizza_types.pizza_type_id = pizzas.pizza_type_id
group by pizza_types.name order by order_count desc limit 5 ;

-- Find the total quantity of each pizza category ordered.

select pizza_types.category , sum(orders_details.quantity) as quantity
from orders_details join pizzas
on orders_details.pizza_id = pizzas.pizza_id
join pizza_types
on pizza_types.pizza_type_id = pizzas.pizza_type_id 
group by pizza_types.category order by quantity desc ;

-- Determine the distribution of orders by hour of the day.

select hour(order_time) as hour , count(order_id) as order_count 
from orders
group by hour (order_time) ;

-- To find the category-wise distribution of pizzas.

select category, count(name) 
from pizza_types
group by category;

-- Group the orders by date and calculate the number of pizzas ordered on every day.

Select * from (select orders.order_date, sum(orders_details.quantity) as total_quantity 
from orders_details join orders on orders_details.order_id = orders.order_id 
group by orders.order_date) as order_quantity;

-- Group the orders by date and calculate the average number of pizzas ordered per day.

select avg(quantity) from (select orders.order_date , sum(orders_details.quantity) as quantity
from orders join orders_details
on orders.order_id = orders_details.order_id
group by order_date) as order_quanity ;

-- Determine the top 3 most ordered pizza types based on revenue.

select sum(orders_details.quantity*pizzas.price) as revenue, pizza_types.name 
from orders_details join pizzas on
orders_details.pizza_id = pizzas.pizza_id
join pizza_types
on pizza_types.pizza_type_id = pizzas.pizza_type_id
group by pizza_types.name order by revenue desc limit 3;

-- Calculate the percentage contribution of each pizza type to total revenue.

select pizza_types.category, round(100*sum(orders_details.quantity*pizzas.price)/(select sum(orders_details.quantity*pizzas.price)
from orders_details join pizzas
on orders_details.pizza_id = pizzas.pizza_id),2) as percentage_contribution
from orders_details join pizzas
on orders_details.pizza_id = pizzas.pizza_id
join pizza_types
on pizza_types.pizza_type_id = pizzas.pizza_type_id
group by pizza_types.category order by percentage_contribution desc;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select name, category, revenue from (select name, category, revenue, Rank() Over(partition by category order by revenue desc) as rn from  (select pizza_types.category, pizza_types.name , sum(orders_details.quantity*pizzas.price) as revenue
from orders_details join pizzas
on orders_details.pizza_id = pizzas.pizza_id
join pizza_types
on pizza_types.pizza_type_id = pizzas.pizza_type_id
group by pizza_types.category, pizza_types.name ) as a) as b
where rn <=3 
  
